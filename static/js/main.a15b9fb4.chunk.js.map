{"version":3,"sources":["Visualization.js","FAQ.js","Footer.js","App.js","index.js"],"names":["BlockVisualization","styled","div","Visualization","text","encrypted","publicMessage","split","encryptedMessage","objects","i","length","element","id","letter_public","letter_encrypted","push","displayVisualization","map","item","MainContainer","FAQ","class","type","Footer","Header","App","useState","message","setMessage","operation","setOperation","key","setKey","showVisualization","setShowVisualization","alphabetSmall","alphabetBig","tekstSzyfr","tekstDeszyfr","handleSZYFR","letterIndex","size","C","trueTab","handleButtonOperation","forEach","indexOf","Szyfrowanie","resultMessage","join","h3Result","className","onClick","placeholder","value","onChange","e","target","maxValue","minValue","prevValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a15b9fb4.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst BlockVisualization = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  \r\n  span {\r\n    margin-left: 15px;\r\n\r\n    p {\r\n      text-align: center;\r\n      margin-left: -10px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Visualization = ({text, encrypted}) => {\r\n    \r\n    const publicMessage = text.split('')\r\n    const encryptedMessage = encrypted.split('')\r\n    let objects = []\r\n\r\n    // Przypisanie liter do nowych, wartości szyfrujących wiadomość\r\n    for (let i = 0; i < publicMessage.length; i++) {\r\n      const element = {\r\n        id: i,\r\n        letter_public: publicMessage[i],\r\n        letter_encrypted: encryptedMessage[i]\r\n      }\r\n      objects.push(element)\r\n    }\r\n    \r\n    const displayVisualization = objects.map(item => (\r\n      <span key={item.id}>\r\n        <p>{item.letter_public}</p>\r\n        <p>{item.letter_encrypted}</p>\r\n      </span>\r\n    ))\r\n\r\n    \r\n    return ( \r\n        <BlockVisualization>\r\n          {displayVisualization}\r\n        </BlockVisualization>\r\n     );\r\n}\r\n \r\nexport default Visualization;\r\n\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst MainContainer = styled.div`\r\n  margin: 0 auto;\r\n  margin-top: 50px;\r\n  max-width: 800px;\r\n  width: 80%;\r\n\r\n  @media (max-width: 767px) {\r\n    max-width: 100%;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst FAQ = () => {\r\n  return (\r\n    <MainContainer>\r\n      <div class=\"accordion\" id=\"accordionExample\">\r\n        <div class=\"accordion-item\">\r\n          <h2 class=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              class=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Jak używać aplikacji efektywnie?\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            class=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div class=\"accordion-body\">\r\n              <strong>Nie używaj polskich znaków!</strong> Aplikacja nie zwróci\r\n              błędu, jednakże twoje polskie znaki np. 'ł', 'ą' nie zostaną\r\n              zakodowane, zostaną jawne pomimo, że pozostałe znaki zostaną\r\n              zaszyfrowane.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"accordion-item\">\r\n          <h2 class=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              class=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Szczegółowa instrukcja obsługi aplikacji\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            class=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div class=\"accordion-body\">\r\n              <strong>\r\n                Wykonaj poniższe kroki w celu zaszyfrowania/odszyfrowania\r\n                tekstu:\r\n              </strong>\r\n              <ul>\r\n                <li>wybierz rodzaj operacji, szyfrowanie lub deszyforowanie</li>\r\n                <li>wpisz treść treść tekstową</li>\r\n                <li>wybierz odpowiedni klucz szyfrujący</li>\r\n                <li>\r\n                  sprawdź rezultat operacji i wizualizację\r\n                  szyfrowania/deszyfrowania\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"accordion-item\">\r\n          <h2 class=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              class=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Szyfr Cezara, dodatkowe informacje\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            class=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div class=\"accordion-body\">\r\n              Szyfr Cezara (zwany też szyfrem przesuwającym, kodem Cezara lub\r\n              przesunięciem Cezariańskim) – jedna z najprostszych technik\r\n              szyfrowania. Jest to rodzaj szyfru podstawieniowego, w którym\r\n              każda litera tekstu jawnego (niezaszyfrowanego) zastępowana jest\r\n              inną, oddaloną od niej o stałą liczbę pozycji w alfabecie, literą\r\n              (szyfr monoalfabetyczny), przy czym kierunek zamiany musi być\r\n              zachowany. Nie rozróżnia się przy tym liter dużych i małych. Nazwa\r\n              szyfru pochodzi od Juliusza Cezara, który prawdopodobnie używał\r\n              tej techniki do komunikacji ze swymi przyjaciółmi.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default FAQ;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst MainContainer = styled.div`\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-top: 20px;\r\n  text-align: center;\r\n`;\r\n\r\nconst Footer = () => {\r\n  return <MainContainer>Zaprojektowane przez Dawid Rożak</MainContainer>;\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\nimport InputRange from \"react-input-range\";\nimport \"react-input-range/lib/css/index.css\";\nimport styled from \"styled-components\";\n\nimport Visualization from \"./Visualization\";\nimport FAQ from \"./FAQ\";\nimport Footer from \"./Footer\";\n\nconst Header = styled.div`\n  width: 100%;\n  text-align: center;\n  margin: 40px 0;\n\n  h1 {\n    font-size: 50px;\n    font-family: \"Montserrat\", sans-serif;\n    letter-spacing: 10px;\n  }\n`;\nconst MainContainer = styled.div`\n  width: 100%;\n  background-color: #f9f9f9;\n  max-width: 1400px;\n  display: flex;\n  justify-content: space-around;\n  margin: 0 auto;\n  padding-top: 20px;\n  padding-bottom: 50px;\n  border-radius: 20px;\n\n  .checked {\n    background-color: #3f51b5;\n    color: #fff;\n  }\n\n  .block_1 {\n    width: 45%;\n  }\n\n  .block_2 {\n    width: 45%;\n\n    .visualization {\n      display: flex;\n    }\n\n    button {\n      margin-top: 20px;\n      display: block;\n    }\n  }\n\n  button {\n    padding: 5px 10px;\n    transition: 0.25s;\n    border: none;\n    outline: none;\n    margin-right: 20px;\n    font-size: 1rem;\n\n    :hover {\n      cursor: pointer;\n    }\n  }\n\n  textarea {\n    display: block;\n    width: 80%;\n    height: 50px;\n    word-break: break-all;\n  }\n\n  h3 {\n    padding: 0;\n    margin: 20px 0;\n  }\n\n  @media (max-width: 767px) {\n    flex-direction: column;\n    padding: 20px;\n\n    .block_1,\n    .block_2 {\n      width: 100%;\n    }\n  }\n`;\n\nconst App = () => {\n  const [message, setMessage] = useState(\"\");\n  const [operation, setOperation] = useState(\"szyfrowanie\");\n  const [key, setKey] = useState(1);\n  const [showVisualization, setShowVisualization] = useState(false);\n\n  const alphabetSmall = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  const alphabetBig = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n\n  // Treści zaszyfrowane i zdeszyfrowane\n\n  let tekstSzyfr = [];\n  let tekstDeszyfr = [];\n\n  // Obsługa szyfrowania i deszyfrowania\n  const handleSZYFR = (letterIndex, size, key, operation) => {\n    const C_szyfr = (letterIndex + key) % 26;\n    const C_deszyfr =\n      (letterIndex - key) % 26 < 0\n        ? 26 + ((letterIndex - key) % 26)\n        : (letterIndex - key) % 26;\n    const C = operation === \"szyfrowanie\" ? C_szyfr : C_deszyfr;\n\n    const trueTab = operation === \"szyfrowanie\" ? tekstSzyfr : tekstDeszyfr;\n    if (size === \"small\") trueTab.push(alphabetSmall[C]);\n    else if (size === \"big\") trueTab.push(alphabetBig[C]);\n  };\n\n  const Szyfrowanie = (text, key, operation) => {\n    text.forEach((item) => {\n      if (alphabetSmall.indexOf(item) !== -1)\n        handleSZYFR(alphabetSmall.indexOf(item), \"small\", key, operation);\n      else if (alphabetBig.indexOf(item) !== -1)\n        handleSZYFR(alphabetBig.indexOf(item), \"big\", key, operation);\n      else (operation === \"szyfrowanie\" ? tekstSzyfr : tekstDeszyfr).push(item);\n    });\n  };\n\n  const handleButtonOperation = (operation) => {\n    setOperation(operation);\n    setMessage(\"\");\n    setShowVisualization(false);\n  };\n\n  Szyfrowanie(message.split(\"\"), key, operation);\n\n  const resultMessage =\n    operation === \"szyfrowanie\" ? tekstSzyfr.join(\"\") : tekstDeszyfr.join(\"\");\n  const h3Result =\n    operation === \"szyfrowanie\" ? \"Zaszyfrowana\" : \"Zdeszyfrowana\";\n  return (\n    <>\n      <Header>\n        <h1>CEZAR</h1>\n        <p>APLIKACJA SZYFRUJĄCA</p>\n      </Header>\n      <MainContainer>\n        <div className=\"block_1\">\n          <h3>Rodzaj operacji:</h3>\n          <button\n            onClick={() => handleButtonOperation(\"szyfrowanie\")}\n            className={operation === \"szyfrowanie\" ? \"checked\" : null}\n          >\n            Szyfrowanie\n          </button>\n          <button\n            onClick={() => handleButtonOperation(\"deszyfrowanie\")}\n            className={operation === \"deszyfrowanie\" ? \"checked\" : null}\n          >\n            Deszyfrowanie\n          </button>\n          <h3>Treść wiadomości:</h3>\n          <textarea\n            placeholder=\"Wiadomość\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          ></textarea>\n          <h3>Wybór klucza: {key}</h3>\n          <InputRange\n            maxValue={26}\n            minValue={1}\n            value={key}\n            onChange={(value) => setKey(value)}\n          />\n        </div>\n        <div className=\"block_2\">\n          <h3>{h3Result} treść:</h3>\n          {resultMessage}\n          <button\n            className={showVisualization ? \"checked\" : null}\n            onClick={() => setShowVisualization((prevValue) => !prevValue)}\n          >\n            {showVisualization ? \"Ukryj\" : \"Pokaż\"} wizualizację\n          </button>\n          <div className=\"visualization\">\n            {showVisualization ? (\n              <Visualization encrypted={resultMessage} text={message} />\n            ) : null}\n          </div>\n        </div>\n      </MainContainer>\n      <FAQ />\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}