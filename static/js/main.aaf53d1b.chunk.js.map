{"version":3,"sources":["Visualization.js","App.js","index.js"],"names":["BlockVisualization","styled","div","Visualization","text","encrypted","publicMessage","split","encryptedMessage","objects","i","length","element","id","letter_public","letter_encrypted","push","displayVisualization","map","item","Header","MainContainer","App","useState","message","setMessage","operation","setOperation","key","setKey","showVisualization","setShowVisualization","alphabetSmall","alphabetBig","tekstSzyfr","tekstDeszyfr","handleSZYFR","letterIndex","size","C","trueTab","handleButtonOperation","forEach","indexOf","Szyfrowanie","resultMessage","join","h3Result","className","onClick","placeholder","value","onChange","e","target","maxValue","minValue","prevValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaf53d1b.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst BlockVisualization = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  \r\n  span {\r\n    margin-left: 15px;\r\n\r\n    p {\r\n      text-align: center;\r\n      margin-left: -10px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Visualization = ({text, encrypted}) => {\r\n    \r\n    const publicMessage = text.split('')\r\n    const encryptedMessage = encrypted.split('')\r\n    let objects = []\r\n\r\n    // Przypisanie liter do nowych, wartości szyfrujących wiadomość\r\n    for (let i = 0; i < publicMessage.length; i++) {\r\n      const element = {\r\n        id: i,\r\n        letter_public: publicMessage[i],\r\n        letter_encrypted: encryptedMessage[i]\r\n      }\r\n      objects.push(element)\r\n    }\r\n    \r\n    const displayVisualization = objects.map(item => (\r\n      <span key={item.id}>\r\n        <p>{item.letter_public}</p>\r\n        <p>{item.letter_encrypted}</p>\r\n      </span>\r\n    ))\r\n\r\n    \r\n    return ( \r\n        <BlockVisualization>\r\n          {displayVisualization}\r\n        </BlockVisualization>\r\n     );\r\n}\r\n \r\nexport default Visualization;\r\n\r\n","import React, {useState} from 'react';\nimport InputRange from 'react-input-range';\nimport 'react-input-range/lib/css/index.css'\nimport styled from 'styled-components'\n\nimport Visualization from './Visualization'\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n`\nconst MainContainer = styled.div`\n  width: 100%;\n  background-color: #F9F9F9;\n  max-width: 1400px;\n  display: flex;\n  justify-content: space-around;\n  margin: 0 auto;\n  padding: 20px 0;\n  border-radius: 20px;\n\n  .checked {\n    background-color: #1EB796;\n  }\n  \n  .block_1 {\n    width: 45%;\n  }\n\n  .block_2 {\n    width: 45%;\n    \n    .visualization {\n      display: flex;\n    }\n\n    button {\n      margin-top: 20px;\n      display: block;\n    }\n  }\n\n  button {\n      padding: 5px 10px;\n      transition: 0.25s;\n      border: none;\n      outline: none;\n      margin-right: 20px;\n\n      :hover {\n        cursor: pointer;\n      }\n    }\n\n  textarea {\n    display: block;\n    width: 80%;\n    height: 50px;\n    word-break: break-all;\n  }\n\n  h3 {\n    padding: 0;\n    margin-bottom: 20px;\n  }\n\n  @media (max-width: 767px) {\n    flex-direction: column;\n    width: 90%;\n    padding: 20px;\n  \n    .block_1, .block_2 {\n      width: 100%;\n    }\n  }\n\n`\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const [operation, setOperation] = useState('szyfrowanie');\n  const [key, setKey] = useState(1);\n  const [showVisualization, setShowVisualization] = useState(false)\n\n  const alphabetSmall = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  const alphabetBig = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\n  // Treści zaszyfrowane i zdeszyfrowane\n\n  let tekstSzyfr = [];\n  let tekstDeszyfr = [];\n\n  // Obsługa szyfrowania i deszyfrowania\n  const handleSZYFR = (letterIndex, size, key, operation) => {\n    const C_szyfr = (letterIndex + key) % 26;\n    const C_deszyfr = (letterIndex - key) % 26 < 0 ? 26+((letterIndex - key) % 26) : (letterIndex - key) % 26;\n    const C = operation === 'szyfrowanie' ? C_szyfr : C_deszyfr;\n\n    const trueTab = operation === 'szyfrowanie' ? tekstSzyfr : tekstDeszyfr\n    if(size === 'small') trueTab.push(alphabetSmall[C])\n    else if(size === 'big') trueTab.push(alphabetBig[C])\n    \n  }\n\n  const Szyfrowanie = (text, key, operation) => {\n    text.forEach(item => {\n      if(alphabetSmall.indexOf(item) !== -1) handleSZYFR(alphabetSmall.indexOf(item), 'small', key, operation);\n      else if(alphabetBig.indexOf(item) !== -1 ) handleSZYFR(alphabetBig.indexOf(item), 'big', key, operation);\n      else (operation === 'szyfrowanie' ? tekstSzyfr : tekstDeszyfr).push(item)\n    })\n  }\n\n  const handleButtonOperation = (operation) => {\n    setOperation(operation);\n    setMessage('');\n    setShowVisualization(false)\n  }\n\n  Szyfrowanie(message.split(''), key, operation)\n\n  const resultMessage = operation === 'szyfrowanie' ? tekstSzyfr.join('') : tekstDeszyfr.join('')\n  const h3Result = operation === \"szyfrowanie\" ? \"Zaszyfrowana\" : \"Zdeszyfrowana\";\n  return ( \n    <>\n      <Header>\n        <h1>Szyfruj jak cezar</h1>\n      </Header>\n      <MainContainer>\n        <div className=\"block_1\">\n          <h3>Rodzaj operacji:</h3>\n          <button onClick={() => handleButtonOperation('szyfrowanie')} className={operation === 'szyfrowanie' ? \"checked\" : null} >Szyfrowanie</button>\n          <button onClick={() => handleButtonOperation('deszyfrowanie')} className={operation === 'deszyfrowanie' ? \"checked\" : null} >Deszyfrowanie</button>\n          <h3>Treść wiadomości:</h3>\n          <textarea  placeholder=\"Wiadomość\" value={message} onChange={(e) => setMessage(e.target.value) }></textarea>\n          <h3>Wybór klucza: {key}</h3>\n          <InputRange maxValue={26} minValue={1} value={key} onChange={value => setKey(value)}/>\n        </div>\n        <div className=\"block_2\">\n        <h3>{h3Result} treść:</h3>\n          {resultMessage}\n          <button onClick={() => setShowVisualization(prevValue => !prevValue)}>{showVisualization ? \"Ukryj\" : \"Pokaż\"} wizualizację</button>\n        <div className=\"visualization\">          \n          {showVisualization ? < Visualization encrypted={resultMessage} text={message}/> : null}\n        </div>\n        </div>\n      </MainContainer>\n      \n    </>\n   );\n}\n \nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}